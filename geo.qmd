
# Geocodificación

La geocodificación es el proceso de transformar las direcciones físicas de los domicilios a coordenadas geográficas (latitud y longitud). La geocodificación se realiza a través del servicio de [Geocoding API](https://developers.google.com/maps/documentation/geocoding/overview) de Google, con la función <span style="color:RoyalBlue">***ggmap::geocode***</span> del paquete [ggmap](https://github.com/dkahle/ggmap) & la funcion <span style="color:RoyalBlue">***denhotspots::geocoden()***</span> del paquete [denhotspots](https://fdzul.github.io/denhotspots/index.html). El proceso de geocodificación se realiza en tres fases. En la **primera fase** se sube la base de datos de los casos del SINAVE a **[RStudio](https://www.rstudio.com/)** y se extrae la información del país/estado/municipio de interés. Si la geocodificación se realiza la primera vez, el proceso es més simple que la segunda vez. Dado que la frecuencia de la geocodificación es semanal y las bases de dengue son bases de datos acumulados, se requiere extraer la base de la semana actual de los casos no geocodificados (casos nuevos, casos de la presente semana) a través de realizar la diferencia entre la semana pasada (casos acumulados geocodificados, asumiendo que se geocodificó desde el primero de enero hasta la semana pasada) y la semana actual (geocodificación por segunda vez). La idea es geocodificar solo los casos que salieron la presente semana y no volver a geocodificar todas las semanas acumuladas incluida la semana actual. Finalmente el archivo se guarda con extensión csv y con el nombre del estado y la fecha, por ejemplo dengue_aguascalientes_2025_03_11 ó dengue_edo01_2025_03_11..
 
En la **segunda fase**, el archivo csv se sube a **[RStudio](https://www.rstudio.com/)**, se crea un vector de direcciones, se realiza manipulación del vector de direcciones si se requiere (por ejemplo, se sustituye # por NUM o NUMERO), se geocodifica y se guarda en archivo temporal, une la base de coordenadas y la base del sinave, finalmente se guarda en un archivo RData.

En la **tercera fase**, cuando se geocodifica por primera vez (casos acumulados del 1 de enero al 3 marzo, el archivo resultado de la segunda fase, se sube y se guarda. Pero cuando se geocodifica la segunda ves se requiere eliminar los casos descartados y unir la base acumulada (1 enero al 3 marzo) con la base de la ultima semana (10 marzo). Acontinuación se describe el procesos para poder geocodificar en R.

# APIs de Google

Para realizar el proceso de geocodificación descrito en los parrafos precedentes requiere que el personal de vectores
gestione dos APIs de Google [Geocoding API](https://developers.google.com/maps/documentation/geocoding/start?hl=es-419) y [Static Maps API](https://developers.google.com/maps/documentation/maps-static?hl=es_419). La primera API sirve para geocodificar las bases de los casos de dengue del sinave y la segunda API sirve para extraer los mapas satelitales para la visualización de las cadenas de transmisión y los mapas de calor.


::: {.callout-note}
`API` es un acrónimo de "Interfaz de Programación de Aplicaciones". Es un conjunto de reglas y protocolos que permiten que las aplicaciones de software se comuniquen entre si.
:::


# Geocodificación en R

Los requisito básicos para la geocodificación en R son:

   1) Tener instalado R & RStudio
   2) Instalar los paquetes **ggmap** y **denhotspots**
   3) Contar con su proyecto de geocodificación
   

Instalación de ggmap   
```{r pkg_ggmap, warning=FALSE, message=FALSE}
install.packages("ggmap", contriburl = "both")
```

Instalación de denhotspots

```{r pkg_denhotspots,  warning=FALSE, message=FALSE}
pak::pkg_install("fdzul/denhotspots")
```
En caso de que no se pueda instalar con el paquete pak, lo cual es poco probable, se puede intentar instalar con los paquetes **remotes** o **devtools**.

```{r,  warning=FALSE, message=FALSE}
remotes::install_github("fdzul/denhotspots")
devtools::install_github("fdzul/denhotspots")
```


## Proyecto de geocodificación

Bajar la carpeta [**geocodificación_dengue_sinave**]() alojada en github y descomprimirla. La carpeta contiene los 32 folder para cada entidad federativa, y cada estado seleccionará su carpeta correspondiente con su entidad.

En el proyecto se encontrarán cuatro carpetas o folders (1.data, 2.script, 3.geocoded_data, 4.RData) y el nombre del proyecto personalizado por estado. Como ejemplo se usa el proyecto del estado de Jalisco 14 (geocodificacion_dengue_sinave_edo14) para ilustrar las carpeta alojadas en el proyecto.

En la carpeta 1.data se encuentran don subfolders (1.semana_actual_recientes & 2.ultima_semana_acumulado), en el primero se guardó la base del SINAVE con la fecha más reciente donde se encuentran los casos de la última semana (2025-03-10) y en el segundo folder se encuentra la base del SINAVE con fecha del 2025-03-03. 


```{r fig.cap="Estructura del proyecto de geocodificación en R"}
fs::dir_tree("/Users/felipedzul/Desktop/geocodificacion_dengue_sinave_edo14", 
             recurse = 3)
```

La carpeta 2.script contiene dos folders, la 1.primera_vez y 2.segunda_vez. La primera carpeta (1.primera_vez) tiene la función de geocodificar los casos de dengue de la base del SINAVE del 1 de enero de 2025 al 3 de marzo del 2025 (casos acumulados hasta el 3 de marzo) y la segunda carpeta (2.segunda_vez) su meta es actualizar la geocodificación con los casos del 4 de marzo al 10 de marzo, de tal forma que actualiza la base de casos geocodificados hasta el 10 de marzo. En conclusión primero se corren los scripts de la carpeta 1.primera_vez y posteriormente se corren los scripts de la carpeta 2.segunda_vez, al final tendremos un archivo actualizado del 1 enero al 10 de marzo del presente año. En ambos casos los scripts se deben correr secuencialmente de acuerdo con el número de scripts.

![](images/calendario_marzo.png)

Las carpetas 3.geocoded_data y 4.RData, conforme se corran los scripts de las carpetas 1.primera_vez y 2.segunda_vez, se iran generando archivo R.Data que se usarán como input para algunos segmentos de código y como input para las cadenas de transmisión o mapas de calor.

::: {.callout-tip}
En la próxima semana (17 de marzo que es día festivo ó 18 de marzo), recuerden que tienen que bajar la base de datos del SINAVE con fecha del 17 ó 18. Guardar el archivo con extensión rar en el carpeta 1.semana_actual_reciente y descomprimirlo. El archivo con fecha 10 de marzo del 2025 se debe pasar a la carpeta 2.ultima_semana_acumulado.

Este proceso tiene que iterativamente realizarse cada semana junto con la geocodificación.

:::


## Geocodificación por primera vez.

Abrimos la carpeta del la proyecto (geocodificacion_dengue_sinave_edo14) dandole doble click y acontinuación abrimos el proyecto en RStudio al darle doble click al archivo del mismo nombre del proyecto con extensión `R.proj` (geocodificacion_dengue_sinave_edo14.Rproj). Este archivo lo identificamos debido a que al al principio tiene un icono característico de RStudio.

![](images/Rproj.png)

Acontinuación entramos en la carpeta `2.script`, nos vamos al folder `1.primera_vez`. En esta carpeta se alojan tres archivos que corresponden con las 3 fases de la geocodificación.

```{r}
fs::dir_tree("/Users/felipedzul/Desktop/geocodificacion_dengue_sinave_edo14/2.script/1.primera_vez", 
             recurse = 1)
```


| Fase    | Script | 
|---------|:-------|
| I       | 1.0.cargar_la_base_datos_dengue_primera_vez.R   | 
| II      | 2.0.geocodificación_dengue_dataset.R  | 
| III     | 3.0.guardar_acumulados.R  |

: Fases de la Geocodificación y scripts


### Fase 1. Cargar base de SINAVE & extraer el estado
 
El primer script (1.0.cargar_la_base_datos_dengue_primera_vez.R) de la carpeta `1.primera_vez` corresponde a la primera fase de la geocodificación. La primera fase se divide en dos pasos 1) cargar la base del SINAVE & extraer la información y 2)
guardar el archivo con extension **csv**

#### Cargar la base del SINAVE

Para cargar la base del SINAVE en Rstudio se usará función read_dengue_dataset del paquete denhotspots incluido en el dengue verse. La función esta especializada en cargar las bases del SINAVE y cuenta con 4 argumentos (path, spatial resolution, des_edo_res y status_caso).


| Argumento        | Definición        | Tipo de Dato | Valores |
|------------------|:------------------|:-------------|:--------|
|path              |ruta del archivo   | texto        | ver código|
|spatial_resolution|Resolucion Espacial| texto        |"country" ,"state" o "municipality"|
|des_edo_res       |Estado de Reporte  | texto.       | "JALISCO" |
|status_caso       |Estatus del Caso   | númerico     |1, 2 ó c(1,2)|

: Argumentos de la función *read_dengue_dataset*


##### Código

Para subir la bases de casos de dengue del SINAVE primero se específica la ruta donde se bajo y descomprimió el archivo txt (DENGUE2_.txt), segundo se define la resolución espacial a la cual se va trabajar (lacional, estatal o municipal). En nuestro ejemplo del proyecto de geocodificación de Jalisco se trabajará a nivel estatal (spatial_resolution = "state"). Tercero se establece el estado (Recordar que el SINAVE usa mayusculas en la base) con el que se va trabajar. En nuestro ejemplo es el estado de Jalisco (des_edo_res = "JALISCO"). Por último, se define el Estatus del Caso (status_caso) con el que se va trabajar, esta variable en la base del SINAVE tiene tres valores 1 para indicar los casos probables, 2 para indicar los casos confirmados, y 3 para indicar los casos descartados. En la última reunión nacional de vectores realizada en Oaxaca del 23 de febrero al 1 de marzo, se acordo trabajar con casos probables (status_caso = 1) y confirmados (status_caso = 2).

```{r}
# Step 1. Load the accumulated dengue dataset ####
# Paso 1. Cargar la base de datos de dengue acumulados ####
# 
z <- denhotspots::read_dengue_dataset(path = "1.data/2.ultima_semana_acumulado/DENGUE2_.txt",
                                      spatial_resolution = "state",
                                      des_edo_res = "JALISCO",
                                      status_caso = c(1, 2))
```


##### Guardar el archivo

Podemos verificar si se subio la base a travéz de observar el ambiente de trabajo y notar si se subio la base como un objeto *z*. La base se puese explorar a traves de varias funciones y paquetes como str, glimse, skim, gt_plt_summary.

base R (str, head, tail, dim)

str
```{r, warning=FALSE, message=FALSE}
str(z)
```

head
```{r, warning=FALSE, message=FALSE}
head(z)
```

tail
```{r, warning=FALSE, message=FALSE}
tail(z)
```
```{r, warning=FALSE, message=FALSE}
dim(z)
```

dplyr::glimse

```{r, warning=FALSE, message=FALSE}
dplyr::glimpse(z)
```

skimr
```{r, warning=FALSE, message=FALSE}
skimr::skim(z)
```


gt_plt_summary
```{r, warning=FALSE, message=FALSE}
gtExtras::gt_plt_summary(z |> dplyr::select(FOL_ID, VEC_ID, CVE_LOC_RES, DES_DIAG_PROBABLE))
```


#### Guardar el archivo

La base de datos de dengue se guarda en un archivo con extensión csv nombrandolo con el nombre del estado y la fecha del archivo cuando se bajo la base del SINAVE.

##### Código
```{r}
write.csv(z, 
          file = "dengue_edo14_2025_03_03.csv")
```


### Fase 2

El segundo script (2.0.geocodificación_dengue_dataset.R) de la carpeta 1.primera_vez corresponde a la segunda fase de la geocodificación. La segunda fase se divide en siete pasos.


#### Paso 1. Nombre de la base

#### Paso 2. Direcciones a gecodificar

#### Paso 3. Manipulación de las direcciones

#### Paso 4. Geocodificación

#### Paso 5. Cargar la base geocodificada

#### Paso 6. Cargar la base del SINAVE

#### Paso 7. Unir ambas bases y guardarla

### Fase 3


